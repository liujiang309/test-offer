finalize()方法的使用说明:
1.一旦GC准备释放对象的存储空间,首先调用该方法;并且在下一次垃圾回收动作发生时,才会真正回收对象占用的内存。即调用该方法的时候,对象还没有被回收。

2.finalize()方法不是C++中的折够函数

3.在C++中对象一定会被销毁(代码无Bug),但是在Java里的对象并非总是被垃圾回收。

4.垃圾回收只与内存相关,也就是说使用GC的唯一原因就是为了回收程序不再使用的内存。

5.上述讨论了，对象可能会获得一块“特殊”的内存区域，这主要发生在JNI本地方法的情况下,本地方法是在Java中使用了非Java代码的方式。非Java代码可能会调用C的malloc()来分配存储空间，而且除了free()方法否则其存储空间将得不到释放，从而造成内存泄漏。此时就可以在finalize()中调用free()方法，清理本地对象。

6.不建议用finalize方法完成“非内存资源“的清理工作,但也可以作为确保某些非内存资源释放的一个补充。

7.System.gc()与System.runFinalization()方法增加了finalize方法执行的机会,但不保证一定会执行。

8.用户可以手动调用对象的finalize方法，但并不影响GC对finalize的行为，即没有卵用～～


